def is_safe(board, row, col, n):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i][col] == 'Q':
            return False

    # Check if there is a queen in the left upper diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False

    # Check if there is a queen in the right upper diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 'Q':
            return False

    return True

def solve_n_queens(board, row, n):
    if row == n:
        return 1

    count = 0
    for col in range(n):
        if board[row][col] == '.' and is_safe(board, row, col, n):
            board[row] = board[row][:col] + 'Q' + board[row][col+1:]
            count += solve_n_queens(board, row + 1, n)
            board[row] = board[row][:col] + '.' + board[row][col+1:]

    return count

# Read input
board = [input() for _ in range(8)]

# Count the number of ways to place the queens
ways = solve_n_queens(board, 0, 8)

print(ways)
